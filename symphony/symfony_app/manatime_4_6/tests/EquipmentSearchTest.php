<?php

namespace App\Tests;

use PHPUnit\Framework\TestCase;
use GuzzleHttp\Client;
use PDO;


class EquipmentSearchTest extends TestCase
{
    /*
     *database pdo connection 
     */
    public static $dbh = null;

    /**
     * Last autogenerated id from test inserts to have an id to make test updates using that id
     */
    public $lastId = null;



    /**
     *@beforeClass
     */
    public static function beforeClassFunction(): void
    {
        echo ("\n Before Class function \n");
        /**
         * Create a direct database connection.
         * Direct connection without symfony is preferred to avoid complications with more packages and configurations of packages.
         */

        self::$dbh = new PDO('mysql:host=172.17.0.3;dbname=app', 'root', 'mypswd');
    }


    /**
     *@afterClass
     */
    public static function afterClassFunction(): void
    {
        echo ("\n After class function \n");
        /**
         * cleanup pdo database connection
         */
        self::$dbh = null;
    }

    /**
     * @before
     */
    public function beforeEachTest(): void
    {
        echo ("\n Before each test \n");
        /**clean and 
         * populate database with test data
         */
        self::$dbh->query("TRUNCATE TABLE manatime_equipment");
        self::$dbh->query("INSERT INTO manatime_equipment (name,category,number,description,created_at,updated_at)VALUES ('keyboard',           'input device',     'sn656565',    'keyboard given to sanjeev','2023-06-13 12:23:45','2023-06-13 13:23:45')");
        self::$dbh->query("INSERT INTO manatime_equipment (name,category,number,description,created_at,updated_at)VALUES ('mouse',              'input device',     'zx5ggtg5',    'given to Marie jo',        '2023-06-13 13:23:45','2023-06-14 13:23:45')");
        self::$dbh->query("INSERT INTO manatime_equipment (name,category,number,description,created_at,updated_at)VALUES ('screen',             'display device',   'hyy656565',   'damaged unrepairable',     '2023-06-13 14:23:45','2023-06-15 13:23:45')");
        self::$dbh->query("INSERT INTO manatime_equipment (name,category,number,description,created_at,updated_at)VALUES ('laptop',             'input device',     '09809807jh',  'reported malfunc,untested','2023-06-13 15:23:45','2023-06-16 13:23:45')");
        self::$dbh->query("INSERT INTO manatime_equipment (name,category,number,description,created_at,updated_at)VALUES ('removable hard disk','input device',     'hkhjkgyt987', 'damaged by sanjeev',       '2023-06-13 16:23:45','2023-06-17 13:23:45')");

        //get autogenerated id from last insert
        $stmt = self::$dbh->query("SELECT LAST_INSERT_ID()");
        $this->lastId = $stmt->fetchColumn();
    }


    /**
     * @after
     */
    public function afterEachTest(): void
    {
        /**
         * Cleans up database and resets it to blank
         */
        echo ("\n After each test \n");
        //self::$dbh->query("DELETE FROM manatime_equipment");//moved to first line of BeforeEachTest so that data can be inspected from database after test
    }





    //test the normal search of an equipment to database
    /**
     * @dataProvider EquipmentSearchProvider
     */
    public function testEquipmentSearch($postDataJson, $expectedResp): void
    {
        $client = new \GuzzleHttp\Client([
            'base_uri' => 'http://localhost:8000',
            'defaults' => [
                'exceptions' => false
            ]
        ]);


        $response = $client->post('/equipment/search', [
            'body' => $postDataJson
        ]);

        //try to make the strings more comparable by removing white characters and reducing probability of unepredictible differences.
        //$expectedResp = '{"result":[{"id":1,"name":"keyboard","category":"input device","number":"sn656565","description":"keyboard given to sanjeev","created_at":"2023-06-13 12:23:45","updated_at":"2023-06-13 13:23:45"},{"id":2,"name":"mouse","category":"input device","number":"zx5ggtg5","description":"given to Marie jo","created_at":"2023-06-13 13:23:45","updated_at":"2023-06-14 13:23:45"},{"id":4,"name":"laptop","category":"input device","number":"09809807jh","description":"reported malfunc,untested","created_at":"2023-06-13 15:23:45","updated_at":"2023-06-16 13:23:45"},{"id":5,"name":"removable hard disk","category":"input device","number":"hkhjkgyt987","description":"damaged by sanjeev","created_at":"2023-06-13 16:23:45","updated_at":"2023-06-17 13:23:45"}]}';
        $expectedResp = str_replace(" ", "", $expectedResp);

        $actualResponse = $response->getBody();
        echo ("test the normal search of an equipment to database");

        echo ("--------\n" . $actualResponse . "\n-------");
        $actualResponse = str_replace(" ", "", $actualResponse);


        //compute Levenshtein difference between 2 strings
        $lev = levenshtein($expectedResp, $actualResponse);
        echo ("\nlevenstein " . $lev);

        //assert that there are less than 5 chars of difference between expected and actual response
        $this->assertLessThan(5, $lev);
    }


    //data provider for testEquipmentSearch    
    public function EquipmentSearchProvider()
    {
        return array(
            [
                '{
                    "name":{"OrAnd":"_AND","EqLike":"LIKE","Pattern":"key"},
                    "category":{"OrAnd":"_OR","EqLike":"LIKE","Pattern":"input"},
                    "number":{"OrAnd":"_OR","EqLike":"LIKE","Pattern":"656"}                
                }',
                '{"result":[{"id":1,"name":"keyboard","category":"input device","number":"sn656565","description":"keyboard given to sanjeev","created_at":"2023-06-13 12:23:45","updated_at":"2023-06-13 13:23:45"},{"id":2,"name":"mouse","category":"input device","number":"zx5ggtg5","description":"given to Marie jo","created_at":"2023-06-13 13:23:45","updated_at":"2023-06-14 13:23:45"},{"id":3,"name":"screen","category":"display device","number":"hyy656565","description":"damaged unrepairable","created_at":"2023-06-13 14:23:45","updated_at":"2023-06-15 13:23:45"},{"id":4,"name":"laptop","category":"input device","number":"09809807jh","description":"reported malfunc,untested","created_at":"2023-06-13 15:23:45","updated_at":"2023-06-16 13:23:45"},{"id":5,"name":"removable hard disk","category":"input device","number":"hkhjkgyt987","description":"damaged by sanjeev","created_at":"2023-06-13 16:23:45","updated_at":"2023-06-17 13:23:45"}]}'
            ],
            [
                '{
                    "number":{"OrAnd":"_AND","EqLike":"EQUAL","Pattern":"sn656565"},
                    "id":{"OrAnd":"_OR","EqLike":"EQUAL","Pattern":"1"},
                    "name":{"OrAnd":"_AND","EqLike":"LIKE","Pattern":"keyboard"},
                    "category":{"OrAnd":"_OR","EqLike":"LIKE","Pattern":"input"},
                    "description":{"OrAnd":"_OR","EqLike":"LIKE","Pattern":"given"},
                    "created_at":{"OrAnd":"_OR","Comparator":"greater","Date":"1995-08-05 16:18:30"},
                    "updated_at":{"OrAnd":"_OR","Comparator":"greater","Date":"1995-06-05 19:18:30"}
                }',
                '{"result":[{"id":1,"name":"keyboard","category":"input device","number":"sn656565","description":"keyboard given to sanjeev","created_at":"2023-06-13 12:23:45","updated_at":"2023-06-13 13:23:45"},{"id":2,"name":"mouse","category":"input device","number":"zx5ggtg5","description":"given to Marie jo","created_at":"2023-06-13 13:23:45","updated_at":"2023-06-14 13:23:45"},{"id":3,"name":"screen","category":"display device","number":"hyy656565","description":"damaged unrepairable","created_at":"2023-06-13 14:23:45","updated_at":"2023-06-15 13:23:45"},{"id":4,"name":"laptop","category":"input device","number":"09809807jh","description":"reported malfunc,untested","created_at":"2023-06-13 15:23:45","updated_at":"2023-06-16 13:23:45"},{"id":5,"name":"removable hard disk","category":"input device","number":"hkhjkgyt987","description":"damaged by sanjeev","created_at":"2023-06-13 16:23:45","updated_at":"2023-06-17 13:23:45"}]}'

            ],
            [
                '{                
                }',
                '{"result":[{"id":1,"name":"keyboard","category":"input device","number":"sn656565","description":"keyboard given to sanjeev","created_at":"2023-06-13 12:23:45","updated_at":"2023-06-13 13:23:45"},{"id":2,"name":"mouse","category":"input device","number":"zx5ggtg5","description":"given to Marie jo","created_at":"2023-06-13 13:23:45","updated_at":"2023-06-14 13:23:45"},{"id":3,"name":"screen","category":"display device","number":"hyy656565","description":"damaged unrepairable","created_at":"2023-06-13 14:23:45","updated_at":"2023-06-15 13:23:45"},{"id":4,"name":"laptop","category":"input device","number":"09809807jh","description":"reported malfunc,untested","created_at":"2023-06-13 15:23:45","updated_at":"2023-06-16 13:23:45"},{"id":5,"name":"removable hard disk","category":"input device","number":"hkhjkgyt987","description":"damaged by sanjeev","created_at":"2023-06-13 16:23:45","updated_at":"2023-06-17 13:23:45"}]}'
            ]

        );
    }


    /**
     * @dataProvider  malformedJsonEquipmentSearchProvider
     */
    //test the search of an equipment to database with input json missing fields.
    public function testMalformedJsonEquipmentSearch($postDataJson, $expectedResp): void
    {


        $client = new \GuzzleHttp\Client([
            'base_uri' => 'http://localhost:8000',
            'defaults' => [
                'exceptions' => false
            ]
        ]);


        $response = $client->post('/equipment/search', [
            'body' => $postDataJson
        ]);

        //try to make the strings more comparable by removing white characters and reducing probability of unepredictible differences.
        //$expectedResp = '{"result":[{"id":1,"name":"keyboard","category":"input device","number":"sn656565","description":"keyboard given to sanjeev","created_at":"2023-06-13 12:23:45","updated_at":"2023-06-13 13:23:45"},{"id":2,"name":"mouse","category":"input device","number":"zx5ggtg5","description":"given to Marie jo","created_at":"2023-06-13 13:23:45","updated_at":"2023-06-14 13:23:45"},{"id":4,"name":"laptop","category":"input device","number":"09809807jh","description":"reported malfunc,untested","created_at":"2023-06-13 15:23:45","updated_at":"2023-06-16 13:23:45"},{"id":5,"name":"removable hard disk","category":"input device","number":"hkhjkgyt987","description":"damaged by sanjeev","created_at":"2023-06-13 16:23:45","updated_at":"2023-06-17 13:23:45"}]}';
        $expectedResp = str_replace(" ", "", $expectedResp);

        $actualResponse = $response->getBody();
        echo ("--------\n" . $actualResponse . "\n-------");
        $actualResponse = str_replace(" ", "", $actualResponse);


        //compute Levenshtein difference between 2 strings
        $lev = levenshtein($expectedResp, $actualResponse);
        echo ("\nlevenstein " . $lev);

        //assert that there are less than 5 chars of difference between expected and actual response
        $this->assertLessThan(5, $lev);
    }



    //data provider for malformedJsonEquipmentSearch    
    public function malformedJsonEquipmentSearchProvider()
    {
        return array(
            [
                '{
                    "name":{"OrAnd":"_AND","EqLike":"LIKE","Pattern":""},
                    "category":{"OrAnd":"_OR","EqLike":"LIKE","Pattern":"input"},
                    "number":{"OrAnd":"_OR","EqLike":"LIKE","Pattern":"656"}                
                }',
                '{"message":"One of the patterns was empty"}'
            ],
            [
                '{
                    "number":{"OrAnd":"_AND","EqLike":"EQUAL","Pattern":"sn656565"},
                    "id":{"OrAnd":"_OR","EqLike":"EQUAL","Pattern":"1"},
                    "name":{"OrAnd":"_AND","EqLike":"LIKE","Pattern":"keyboard"},
                    "category":{"OrAnd":"_OR","EqLike":"","Pattern":"input"},
                    "description":{"OrAnd":"_OR","EqLike":"LIKE","Pattern":"given"},
                    "created_at":{"OrAnd":"_OR","Comparator":"greater","Date":"1995-08-05 16:18:30"},
                    "updated_at":{"OrAnd":"_OR","Comparator":"greater","Date":"1995-06-05 19:18:30"}
                }',
                '{"message":"EqLike must be EQUAL or LIKE. was supplied instead"}'
            ],
            [
                '{ 
                    "number":{"OrAnd":"_AND","EqLike":"EQUAL","Pattern":"sn656565"},
                    "id":{"OrAnd":"_OR","EqLike":"EQUAL","Pattern":"1"},
                    "name":{"OrAnd":"_AND","EqLike":"LIKE","Pattern":"keyboard"},
                    "category":{"OrAnd":"","EqLike":"","Pattern":"input"},
                    "description":{"OrAnd":"_OR","EqLike":"LIKE","Pattern":"given"},
                    "created_at":{"OrAnd":"_OR","Comparator":"greater","Date":"1995-08-05 16:18:30"},
                    "updated_at":{"OrAnd":"_OR","Comparator":"greater","Date":"1995-06-05 19:18:30"}               
                }',
                '{"message":"OrAnd must be _OR or _AND. was supplied instead."}'
            ]

        );
    }




    //test the addition of an equipment to database with input json having bad field keys.
    /**
     * @dataProvider  wrongKeysJsonEquipmentSearchProvider
     */
    //test the search of an equipment to database with wrong keys in input json .
    public function testWrongKeysJsonEquipmentSearch($postDataJson, $expectedResp): void
    {


        $client = new \GuzzleHttp\Client([
            'base_uri' => 'http://localhost:8000',
            'defaults' => [
                'exceptions' => false
            ]
        ]);


        $response = $client->post('/equipment/search', [
            'body' => $postDataJson
        ]);

        //try to make the strings more comparable by removing white characters and reducing probability of unepredictible differences.
        $expectedResp = str_replace(" ", "", $expectedResp);

        $actualResponse = $response->getBody();
        echo ("--------\n" . $actualResponse . "\n-------");
        $actualResponse = str_replace(" ", "", $actualResponse);


        //compute Levenshtein difference between 2 strings
        $lev = levenshtein($expectedResp, $actualResponse);
        echo ("\nlevenstein " . $lev);

        //assert that there are less than 5 chars of difference between expected and actual response
        $this->assertLessThan(5, $lev);
    }



    //data provider for wrongkeysEquipmentSearch    
    public function wrongKeysJsonEquipmentSearchProvider()
    {
        return array(
            [
                '{
                    "name":{"OrAnd":"_AND","EqLikewrong":"LIKE","Pattern":"somepat"},
                    "category":{"OrAnd":"_OR","EqLike":"LIKE","Pattern":"input"},
                    "number":{"OrAnd":"_OR","EqLike":"LIKE","Pattern":"656"}                
                }',
                '{"message":" Any parameter key must be in list of keys OrAnd,EqLike,Pattern,Date,Comparator.One key is wrongly EqLikewrong"}'
            ],
            [
                '{
                    "number":{"OrAnd":"_AND","EqLike":"EQUAL","Pattern":"sn656565"},
                    "id":{"OrAnd":"_OR","EqLike":"EQUAL","Pattern":"1"},
                    "name":{"OrAnd":"_AND","EqLike":"LIKE","Pattern":"keyboard"},
                    "category":{"OrAnd":"_OR","EqLike":"LIKE","Pattern":"input"},
                    "description":{"OrAnd":"_OR","EqLike":"LIKE","Pattern":"given"},
                    "created_at":{"OrAnd":"_OR","Comparar":"greater","Date":"1995-08-05 16:18:30"},
                    "updated_at":{"OrAnd":"_OR","Comparator":"greater","Date":"1995-06-05 19:18:30"}
                }',
                '{"message":" Any parameter key must be in list of keys OrAnd,EqLike,Pattern,Date,Comparator.One key is wrongly Comparar"}'
            ],
            [
                '{ 
                    "number":{"OrAnd":"_AND","EqLike":"EQUAL","Pattern":"sn656565"},
                    "id":{"OrAnd":"_OR","EqLike":"EQUAL","Pattern":"1"},
                    "name":{"OrAnd":"_AND","EqLike":"LIKE","Pattern":"keyboard"},
                    "category":{"OrAnd":"","EqLike":"","Pattern":"input"},
                    "description":{"OrAnd":"_OR","EqLike":"LIKE","Pattern":"given"},
                    "created_at":{"OrAnd":"_OR","Comparator":"greater","Date":"1995-08-05 16:18:30"},
                    "updated_at":{"OrAnd":"_OR","Comparator":"greater","Da":"1995-06-05 19:18:30"}               
                }',
                '{"message":" Any parameter key must be in list of keys OrAnd,EqLike,Pattern,Date,Comparator.One key is wrongly Da"}'
            ]

        );
    }
}
